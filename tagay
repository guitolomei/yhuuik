<?php
class Autenticacao {

	public static function Login() {
		$parametros["email"] = new CText("email");
		$parametros["senha"] = new CPassword("senha", null, 20, 30);
		$botao_autenticar = new CSubmit("autenticar");
        $parametros["botoes"] = array($botao_autenticar);
        return $parametros;
    }

	public static function Verifica($parametros) {
		extract($parametros);
		$portal = isset($portal);
		$email = trim($email);
		if (empty($email)) {
			Alerta::addMensagem("Por favor informe o email.");
			return false;
		}
		if (isset($senha)) {
			if (strlen(trim($senha)) == 0) {
				Alerta::addMensagem("Por favor informe a senha.");
				return false;
			}
		}
		if (AUTENTICACAO_LDAP) {
			$ldapconn = ldap_connect(LDAP_SERVER);
			if (ACTIVE_DIRECTORY) {
				ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);  //Set the LDAP Protocol used by your AD service
				ldap_set_option($ldapconn, LDAP_OPT_REFERRALS, 0);         //This was necessary for my AD to do anything
				if (@ldap_bind($ldapconn, $email.AD_LDAP_USER_DOMAIN, utf8_encode($senha)) === false) {
					Alerta::addMensagem("Senha inválida.");
					return false;
				}
			} else {
	  			if (($search_result = @ldap_search($ldapconn, BASE_DN, "mail=$email")) === false) {
					Alerta::addMensagem("Erro ao tentar conectar no servidor LDAP.");
					return false;
				}
				if (($first_entry = @ldap_first_entry ($ldapconn, $search_result)) === false) {
					Alerta::addMensagem("Email inválido ou inexistente.");
					return false;
				}
				if (!$portal && (@ldap_bind($ldapconn, $dn = ldap_get_dn ($ldapconn, $first_entry), utf8_encode($senha))) === false) {
					Alerta::addMensagem("Senha inválida.");
					return false;
				}
			}
		}
		$conexao = ConexaoSimba::getConexao();
		if (!$conexao->Consulta(Sql::retornaSqlInfoPessoal($email), $resultado)) {
			Alerta::addMensagem("Erro ao consultar informações do usuário.");
			return false;
		}
		if (count($resultado) == 0) {
			Alerta::addMensagem("Usuário não consta no cadastro de pessoal.");
			return false;	
	
		}
		
		
		$info_pessoal = $resultado[0];
		$matricula = $info_pessoal["matricula"];
		if (!$conexao->Consulta(Sql::retornaSqlInfoUsuario($matricula), $resultado)) {
			Alerta::addMensagem("Erro ao consultar informações do usuário.");
			return false;
		}
		if (count($resultado) == 0) {
			if (stripos($info_pessoal["cargo_codigo"], "mpf") === false) {
				Alerta::addMensagem("Usuário não autorizado a acessar o Sistema.");
				return false;
			}
			if (!$conexao->Consulta(Sql::retornaSqlIdPerfil($nome_perfil = "MEMBRO"), $resultado)) {
				Alerta::addMensagem("Erro ao consultar perfil.");
				return false;
			}
			if (count($resultado) == 0) {
				Alerta::addMensagem("Perfil inexistente.");
				return false;
			}
			$usuario = new Usuario($conexao);
			$usuario->setMatricula($matricula);
			$usuario->setIdPerfil($resultado[0]["id"]);
			if (!$usuario->Grava()) {
				Alerta::addMensagem("Erro ao criar usuário.");
				return false;
			}
			$conexao->Commit();
			$info = array_merge (array("id" => $usuario->getId(),
									   "id_perfil" => $usuario->getIdPerfil(),
									   "perfil" => $nome_perfil), $info_pessoal);
		} else {
			$info = array_merge ($resultado[0], $info_pessoal);
		}
		if (MANUTENCAO) {
			if (strcasecmp($info["perfil"], "admin") != 0) {
				Alerta::addMensagem("Sistema em manutenção. Tente mais tarde.");
				return false;
			} else {
				Alerta::addMensagem("Sistema em modo MANUTENÇÃO.");
				Alerta::Mostra();
			}
		}
		Sessao::getSessao()->set("info_usuario", $info);
		Sessao::getSessao()->set("autenticacao", "S");
		return true;
	}

	public static function Recarrega($parametros = array()) {
		$host = $_SERVER['SERVER_NAME'];
		$dir = dirname($_SERVER['PHP_SELF']);
		if (isset($parametros["portal"])) {
			header("Location: http://$host$dir/Simba.php");
		} else {
			print("//js\n");
			print("window.location.replace('http://$host$dir/Simba.php');\n");
		}
	}

	public static function Logout() {
		Sessao::getSessao()->encerra();
		self::Recarrega();
	}

	public static function retornaPermissoes($id_usuario) {
		$conexao = ConexaoSimba::getConexao();
		if ($conexao->Consulta(Sql::retornaSqlPermissoesUsuario($id_usuario), $resultado) === false) {
			Alerta::addMensagem("Erro ao consultar permissões do usuário.");
			return false;
		}
		return $resultado;
	}

	public static function InfoUsuario() {
		return Sessao::getSessao()->get("info_usuario");
	}

	/**
	 * Lê a chave de acesso do portal, que é um registro gravado na base do portal
	 * Esse método serve para garantir a autenticidade da requisição. Se a chave existir
	 * na base, a autorização de acesso será dada e a chave será excluída para impedir que
	 * a requisição valha outras vezes.
	 * 
	 * @param string $codico Código da chave de acesso (um número hexadecimal aleatório criado pelo portal com 32 caracteres que é passado para a aplicação via GET)
	 * @return string Email do usuário para buscar suas informações na árvore 
	 * @todo Prever autenticação de usuários externos (fora da árvore)
	 */
	public static function LeChavePortal($codigo) {
		$conexao = ConexaoPortalAsspa::getConexao();
		$sql = "
		        SELECT u.email
		             , a.id
		          FROM chave_acesso a
		             , usuario u
		         WHERE a.codigo_chave_portal = '$codigo'
		           AND a.data_validade > SYSDATE
		           AND a.id_usuario = u.id";
		$conexao->Consulta($sql, $resultado);
		if (count($resultado)) {
			$sql = "
			        DELETE
			          FROM chave_acesso
			         WHERE id = " . $resultado[0]["id"];
			$conexao->ExecutaSql($sql);
			return $resultado[0]["email"];
		}
		return NULL;
	}
}
?>
